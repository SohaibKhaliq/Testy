"use strict";
(self["webpackChunktesty"] = self["webpackChunktesty"] || []).push([["vendors-node_modules_theia_plugin-ext-vscode_lib_browser_plugin-vscode-frontend-module_js-nod-710267"],{

/***/ "./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js ***!
  \*****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeContribution = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const user_storage_uri_1 = __webpack_require__(/*! @theia/userstorage/lib/browser/user-storage-uri */ "./node_modules/@theia/userstorage/lib/browser/user-storage-uri.js");
const uri_components_1 = __webpack_require__(/*! @theia/plugin-ext/lib/common/uri-components */ "./node_modules/@theia/plugin-ext/lib/common/uri-components.js");
const delegating_file_system_provider_1 = __webpack_require__(/*! @theia/filesystem/lib/common/delegating-file-system-provider */ "./node_modules/@theia/filesystem/lib/common/delegating-file-system-provider.js");
let PluginVSCodeContribution = class PluginVSCodeContribution {
    registerFileSystemProviders(service) {
        this.mapSchemas(service, uri_components_1.Schemes.vscodeRemote, 'file');
        this.mapSchemas(service, uri_components_1.Schemes.userData, user_storage_uri_1.UserStorageUri.scheme);
    }
    mapSchemas(service, from, to) {
        service.onWillActivateFileSystemProvider(event => {
            if (event.scheme === from) {
                event.waitUntil((async () => {
                    const provider = await service.activateProvider(to);
                    service.registerProvider(from, new delegating_file_system_provider_1.DelegatingFileSystemProvider(provider, {
                        uriConverter: {
                            to: resource => resource.withScheme(to),
                            from: resource => resource.withScheme(from)
                        }
                    }));
                })());
            }
        });
    }
};
PluginVSCodeContribution = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeContribution);
exports.PluginVSCodeContribution = PluginVSCodeContribution;


/***/ }),

/***/ "./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-frontend-module.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-frontend-module.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2018 Red Hat, Inc. and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const core_1 = __webpack_require__(/*! @theia/core */ "./node_modules/@theia/core/lib/common/index.js");
const plugin_vscode_commands_contribution_1 = __webpack_require__(/*! ./plugin-vscode-commands-contribution */ "./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-commands-contribution.js");
const plugin_vscode_environment_1 = __webpack_require__(/*! ../common/plugin-vscode-environment */ "./node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-environment.js");
const plugin_vscode_contribution_1 = __webpack_require__(/*! ./plugin-vscode-contribution */ "./node_modules/@theia/plugin-ext-vscode/lib/browser/plugin-vscode-contribution.js");
const file_service_1 = __webpack_require__(/*! @theia/filesystem/lib/browser/file-service */ "./node_modules/@theia/filesystem/lib/browser/file-service.js");
exports["default"] = new inversify_1.ContainerModule(bind => {
    bind(plugin_vscode_environment_1.PluginVSCodeEnvironment).toSelf().inSingletonScope();
    bind(plugin_vscode_commands_contribution_1.PluginVscodeCommandsContribution).toSelf().inSingletonScope();
    bind(core_1.CommandContribution).toService(plugin_vscode_commands_contribution_1.PluginVscodeCommandsContribution);
    bind(plugin_vscode_contribution_1.PluginVSCodeContribution).toSelf().inSingletonScope();
    bind(file_service_1.FileServiceContribution).toService(plugin_vscode_contribution_1.PluginVSCodeContribution);
});


/***/ }),

/***/ "./node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-environment.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-environment.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


// *****************************************************************************
// Copyright (C) 2020 TypeFox and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PluginVSCodeEnvironment = void 0;
const inversify_1 = __webpack_require__(/*! @theia/core/shared/inversify */ "./node_modules/@theia/core/shared/inversify/index.js");
const env_variables_1 = __webpack_require__(/*! @theia/core/lib/common/env-variables */ "./node_modules/@theia/core/lib/common/env-variables/index.js");
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "./node_modules/@theia/core/lib/common/uri.js");
let PluginVSCodeEnvironment = class PluginVSCodeEnvironment {
    async getUserExtensionsDirUri() {
        if (!this._userExtensionsDirUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._userExtensionsDirUri = configDir.resolve('extensions');
        }
        return this._userExtensionsDirUri;
    }
    async getDeploymentDirUri() {
        if (!this._deployedPluginsUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._deployedPluginsUri = configDir.resolve('deployedPlugins');
        }
        return this._deployedPluginsUri;
    }
    async getTempDirUri(prefix) {
        if (!this._tmpDirUri) {
            const configDir = new uri_1.default(await this.environments.getConfigDirUri());
            this._tmpDirUri = configDir.resolve('tmp');
        }
        if (prefix) {
            return this._tmpDirUri.resolve(prefix);
        }
        return this._tmpDirUri;
    }
};
__decorate([
    (0, inversify_1.inject)(env_variables_1.EnvVariablesServer),
    __metadata("design:type", Object)
], PluginVSCodeEnvironment.prototype, "environments", void 0);
PluginVSCodeEnvironment = __decorate([
    (0, inversify_1.injectable)()
], PluginVSCodeEnvironment);
exports.PluginVSCodeEnvironment = PluginVSCodeEnvironment;


/***/ }),

/***/ "./node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-uri.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@theia/plugin-ext-vscode/lib/common/plugin-vscode-uri.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// *****************************************************************************
// Copyright (C) 2022 Ericsson and others.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License v. 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0.
//
// This Source Code may also be made available under the following Secondary
// Licenses when the conditions for such availability set forth in the Eclipse
// Public License v. 2.0 are satisfied: GNU General Public License, version 2
// with the GNU Classpath Exception which is available at
// https://www.gnu.org/software/classpath/license.html.
//
// SPDX-License-Identifier: EPL-2.0 OR GPL-2.0-only WITH Classpath-exception-2.0
// *****************************************************************************
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.VSCodeExtensionUri = void 0;
const uri_1 = __webpack_require__(/*! @theia/core/lib/common/uri */ "./node_modules/@theia/core/lib/common/uri.js");
/**
 * Static methods for identifying a plugin as the target of the VSCode deployment system.
 * In practice, this means that it will be resolved and deployed by the Open-VSX system.
 */
var VSCodeExtensionUri;
(function (VSCodeExtensionUri) {
    VSCodeExtensionUri.VSCODE_PREFIX = 'vscode:extension/';
    /**
     * Should be used to prefix a plugin's ID to ensure that it is identified as a VSX Extension.
     * @returns `vscode:extension/${id}`
     */
    function toVsxExtensionUriString(id) {
        return `${VSCodeExtensionUri.VSCODE_PREFIX}${id}`;
    }
    VSCodeExtensionUri.toVsxExtensionUriString = toVsxExtensionUriString;
    function toUri(idOrName, namespace) {
        if (typeof namespace === 'string') {
            return new uri_1.default(toVsxExtensionUriString(`${namespace}.${idOrName}`));
        }
        else {
            return new uri_1.default(toVsxExtensionUriString(idOrName));
        }
    }
    VSCodeExtensionUri.toUri = toUri;
    function toId(uri) {
        if (uri.scheme === 'vscode' && uri.path.dir.toString() === 'extension') {
            return uri.path.base;
        }
        return undefined;
    }
    VSCodeExtensionUri.toId = toId;
})(VSCodeExtensionUri = exports.VSCodeExtensionUri || (exports.VSCodeExtensionUri = {}));


/***/ })

}]);
//# sourceMappingURL=vendors-node_modules_theia_plugin-ext-vscode_lib_browser_plugin-vscode-frontend-module_js-nod-710267.js.map